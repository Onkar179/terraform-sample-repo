name: Checkov with OpenAI Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  checkov_openai:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov
      run: |
        checkov -f . --output json > checkov_output.json

    - name: Install jq
      run: sudo apt-get install jq

    - name: Extract Checkov Findings
      id: extract-findings
      run: |
        jq -c '.results.failed_checks[]' checkov_output.json > findings.json

    - name: Enhance Guidelines with OpenAI
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        while IFS= read -r finding; do
          resource=$(echo "$finding" | jq -r '.resource')
          issue=$(echo "$finding" | jq -r '.check_name')
          description=$(echo "$finding" | jq -r '.check_result.description')
          guideline=$(echo "$finding" | jq -r '.guideline // "No specific guideline provided"')

          prompt=$(cat <<EOF
Resource: $resource
Issue: $issue
Description: $description
Guideline: $guideline

Provide a detailed guideline for fixing this issue, including best practices, potential risks, and example code snippets if applicable.
EOF
          )

          response=$(curl -s -X POST https://api.openai.com/v1/completions \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "model": "text-davinci-003",
            "prompt": "'"$prompt"'",
            "temperature": 0.7,
            "max_tokens": 300
          }')

          enhanced_guideline=$(echo "$response" | jq -r '.choices[0].text')
          echo -e "Resource: $resource\nIssue: $issue\nEnhanced Guideline: $enhanced_guideline\n"

        done < findings.json
